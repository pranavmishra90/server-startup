Add your title here
########################################################################
# Subject line imperative uppercase verbs:
#
#   Add = Create a capability e.g. feature, test, dependency.
#   Drop = Delete a capability e.g. feature, test, dependency.
#   Fix = Fix an issue e.g. bug, typo, accident, misstatement.
#   Bump = Increase the version of something e.g. a dependency.
#   Make = Change the build process, or tools, or infrastructure.
#   Start = Begin doing something; e.g. enable a toggle, feature flag, etc.
#   Stop = End doing something; e.g. disable a toggle, feature flag, etc.
#   Optimize = A change that MUST be just about performance, e.g. speed up code.
#   Document = A change that MUST be only in the documentation, e.g. help files.
#   Refactor = A change that MUST be just refactoring.
#   Reformat = A change that MUST be just format, e.g. indent line, trim space, etc.
#   Rephrase = A change that MUST be just textual, e.g. edit a comment, doc, etc.
########################################################################
########################################################################

########################################################################
# Why is this change happening?
# Describe the purpose, such as a goal, or use case, or user story, etc.
# For every line, use 72 char maximum width, which is this line's width.
########################################################################
Why:

########################################################################
# How is this change happening?
# Describe any relevant algorithms, protocols, implementation spec, etc.
# For every line, use 72 char maximum width, which is this line's width.
########################################################################
How:

########################################################################
# Add any tags you want, such as search text, hashtags, keywords, codes.
########################################################################
Tags:

########################################################################
#
# ## Help ##
#
# How to write a good git commit message:
# https://github.com/joelparkerhenderson/git-commit-message
#
#
# For the subject line:
#
#   * Use 50 characters maximum.
#
#   * Do not use a sentence-ending period.
#
# For the body text:
#
#   * Use as many lines as you like.
#
#   * Use 72 characters maximum per line for typical word wrap text.
#
#
# ## Tracking ##
#
# * Package: git-commit-template
# * Version: 7.1.0
# * Updated: 2022-01-13T17:15:21Z
# * Licence: GPL-2.0-only or contact us for custom license.
# * Contact: Joel Parker Henderson (http://joelparkerhenderson.com)
#
########################################################################

### GIT TRAILERS -- THESE MUST BE LAST IN THE COMMIT MESSAGE ###

# Git trailers are optional. Use them if you want, how you want.
# The trailers below are provided as examples that you can customize.

# For example, you can add any relevant links to a blog post, or graphic
# design images, or industry publications, specifications, tickets, etc.
#See: Description <https://example.com/...>
#See: Description <https://example.com/...>

# If the commit is written by multiple people, then use the git trailers
# to thank each person as a co-author; various git tools can track this.
#Co-authored-by: Name <name@example.com>
#Co-authored-by: Name <name@example.com>

# If the commit is sponsored by a person or company, then add them here.
# This kind of trailer is more-frequent in open source funding projects.
#Sponsored-by: Name <name@example.com>
#Sponsored-by: Name <name@example.com>
